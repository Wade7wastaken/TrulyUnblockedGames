const fs = require("fs");
const htmlminifier = require("html-minifier");
const csso = require("csso");
const UglifyJS = require("uglify-js");

const ignored_folders = ["Output", "Scripts", "form"];
const ignored_endings = ["md"];

// Remove the contents of the Output folder
function del(loc) {
	const dir = fs.opendirSync(loc);
	let dirent;
	while ((dirent = dir.readSync()) !== null) {
		if (dirent.isFile()) {
			fs.rmSync(loc + "/" + dirent.name, { recursive: true });
		} else if (dirent.isDirectory()) {
		}
	}
	dir.closeSync();
}

fs.rmSync("./Output", { recursive: true });

function loop(loc) {
	const dir = fs.opendirSync(loc);
	let dirent;
	while ((dirent = dir.readSync()) !== null) {
		// filter out git
		if (dirent.name[0] != ".") {
			if (dirent.isFile()) {
				let ending = dirent.name.split(".").splice(-1)[0];
				let path = loc + "/" + dirent.name;
				if (
					!ignored_endings.includes(ending) &&
					(!loc.includes("EmulatorJS") || loc.includes("data")) &&
					!(loc.includes("EmulatorJS") && loc.includes("minify")) &&
					!(loc.includes("EmulatorJS") && ending == "html")
				) {
					const contents = fs.readFileSync(path, "utf8");
					let min = contents;

					// don't minify emulatorjs (its already minified)
					if (!loc.includes("EmulatorJS")) {
						switch (ending) {
							case "html": {
								min = htmlminifier.minify(contents, {
									collapseBooleanAttributes: true,
									collapseInlineTagWhitespace: true,
									collapseWhitespace: true,
									continueOnParseError: true,
									html5: true,
									includeAutoGeneratedTags: false,
									minifyCSS: true,
									minifyJS: true,
									minifyURLs: true,
									quoteCharacter: '"',
									removeAttributeQuotes: true,
									removeComments: true,
									removeEmptyAttributes: true,
									removeOptionalTags: true,
									removeRedundantAttributes: true,
									removeScriptTypeAttributes: true,
									removeStyleLinkTypeAttributes: true,
									sortAttributes: true,
									sortClassName: true,
									useShortDoctype: true,
								});
								break;
							}

							case "css": {
								min = csso.minify(contents, {
									comments: false,
									restructure: true,
								}).css;
								break;
							}

							case "js": {
								min = UglifyJS.minify(contents, {}).code;

								break;
							}

							case "json": {
								min = UglifyJS.minify(contents, {
									expression: true,
									output: {
										quote_keys: true,
									},
								}).code;

								break;
							}
						}
					}

					const outfile = "./Output" + path.slice(1);
					let outdir = outfile.split("/").slice(0, -1).join("/");

					// we need to create the folders before writing the file

					fs.mkdirSync(outdir, { recursive: true });

					fs.writeFileSync(outfile, min);

					console.log("File: " + path);
				}
			} else if (dirent.isDirectory()) {
				if (!ignored_folders.includes(dirent.name)) {
					loop(loc + "/" + dirent.name);
				}
			}
		}
	}
	dir.closeSync();
}

loop(".");
